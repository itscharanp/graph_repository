package practice3;
import java.util.*;
public class Practice3 
{ 
     static class Graph
     {
         private int vertices;
         private LinkedList<Integer> adj[];   
         Graph(int v)
         {
           vertices = v;
           adj = new LinkedList[v];
           for(int i=0;i<vertices;++i)
           {
               adj[i] = new LinkedList<>(); 
           }
         }
         
         void addEdge(int v,int w)
         {
             adj[v].add(w);
         }
 
         void DFSutil(int sn,boolean[] visited)
         {
             
             visited[sn] = true;
             System.out.print(sn+" ");
             
             Iterator<Integer> i = adj[sn].listIterator();
             
             while(i.hasNext())
             {
                 int n = i.next();
                 if(!visited[n])
                 {
                     DFSutil(n,visited);
                 }

              } 
             
             
             
         }        
         void DFS(int startnode)
         {
             boolean visited[] = new boolean[vertices];
             DFSutil(startnode,visited);
             
             
         }       
     }        
    
    

    public static void main(String[] args) 
    {
       Scanner in = new Scanner(System.in);
       System.out.println("Enter the number of vertices");
       int nv = in.nextInt();
       Graph gh = new Graph(nv);
       System.out.println("Enter the number of edges");
       int edges = in.nextInt();
       for(int i=0;i<edges;i++)
       {
           int v = in.nextInt();
           int ev = in.nextInt();
           gh.addEdge(v, ev);
       } 
       gh.DFS(0);
    }
}
